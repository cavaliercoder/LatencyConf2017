Configuring Timeouts
Latency Conference
16 Nov 2017
Tags: latency, timeouts, cloud

Ryan Armstrong
Production Engineering Manager, Seven West Media
ryan@cavaliercoder.com
http://cavaliercoder.com/
@cavaliercoder


* Agenda

- Backstory
- Anatomy of a timeout
- Scenarios
- One simple rule
- Trade-offs


* Backstory

.image blog.png _ 900


* Backstory

.link https://paulhammant.com/ Paul Hammant
DevOps and Continuous Delivery expert

"So, a great article. You could do well to do a canonical blog entry on timeouts I think, complete with sequence diagrams. Perhaps with a simulation :)"


* The goal

- Encourage systems thinking
- Sweat the details


* Flow of requests through a system

Timeouts are important in container pods, micro-services, large scale
distributed systems, etc.

.image system.svg


* N-Tier

Also important in smaller architectures

.image n-tier.svg


* Monoliths?

Are timeouts important for monolithic applications?

.image monolith-1.svg


* Monoliths?

Yes!!!

.image monolith-2.svg

What are you not considering?

- routers, firewalls, load balancers, etc.
- TCP, DNS, etc.
- browsers, proxies, etc.
- collocated services like databases, storage, etc.


* Anatomy of a timeout

*Client*: How long do I wait for the server?

*Server*: How long will I wait for the client's request?


* Anatomy of a timeout

A HTTPS request

- Name resolution
- TCP handshake
- TLS handshake
- Transfer request headers
- Transfer request body
- Time-to-first-byte
- Transfer response headers
- Transfer response body


* Anti-pattern: Default timeouts

- Typically generous
- Optimized for local error reduction

.image default_timeouts.svg


* Anti-pattern: Default timeouts

- Errors manifest wherever the slowest timeout is configured - not where the issue occurred
- Ripe for Denial-of-Service
- _All_ user requests may be affected by high load


* Anti-pattern: Aggressive timeouts

- All components optimized for local latency

.image agressive_timeouts.svg


* Anti-pattern: Aggressive timeouts

- Errors manifest in unpredictable places
- Minor load can cause healthy requests to timeout
- No consideration for upstream dependencies


* Anti-pattern: Equal timeouts

- All components have similar timeouts
- Timeout allows enough time for healthy requests under load

.image equal_timeouts.svg


* Anti-pattern: Equal timeouts

- Errors manifest in unpredictable places
- Backends are given too much time to service unhealthy requests
- Ripe for Denial-of-Service


* One simple rule

    timeout(n) > T(n+1)

The timeout of any given component must be greater than the maximum time for the
next component to service a healthy request.

.image fixed.svg


* One simple rule

- Timeout errors manifest at the edge where they occur
- Unhealthy requests are cancelled - reserving capacity for healthy requests


* Load characterisation

What is the maximum time a healthy request should take?

Consider

- Variance - E.g. Static vs. Dynamic content or large vs. small files
- Multiple round trips - E.g. multiple database queries per page
- Asynchronous vs. synchronous requests
- Concurrency - E.g. The Node.js event loop or Go-routines
- Multi-processor parallelism
- CPU vs. IO bound-latency - E.g. DOM rendering vs. data retrieval
- Keep-alives vs. Session negotiation

but wait, theres more...


* Load characterisation

- Retries and backoffs for failed requests
- Caching tiers and warm up delays
- Cancellation and its propagation
- Rate limiting and throttling
- Quality-of-Service (Qos) and prioritisation
- Queues and decoupled workflows
- Upstream dependencies

Maybe this is too hard?


* There are no simple rules

There are always tradeoffs.

Consider whether you need to optimise for:

- throughput?
- or guaranteed delivery?


* Everything must be bounded

Predictable errors are better than unpredictable errors.

Don't be discouraged. Be curious!

.image system.svg